buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name 'spigot'
            url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }
        maven {
           name 'maven2'
           url 'http://repo1.maven.org/maven/'
        }
    }
    dependencies {
        //classpath files('ForgeGradle-1.2-SNAPSHOT.jar')
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT-2'
        classpath fileTree(dir: "libs", include: "*.jar")
    }
}

configurations {
    deployJars
}

import static net.minecraftforge.gradle.dev.ForgeDevPlugin.*

apply plugin: 'maven'
apply plugin: 'forgedev'

//[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenLocal()
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
}

minecraft {
    version = '1.7.10'
    mcpVersion = '9.05'
    fmlDir = projectDir.getAbsolutePath() + "/fml";
    mainClass = 'cpw.mods.fml.relauncher.ServerLaunchWrapper'
    tweakClass = 'cpw.mods.fml.common.launcher.FMLTweaker'
    installerVersion = "1.4"
}

group = 'net.minecraftforge'
//version = getVersionFromJava(getProject(), 'src/main/java/net/minecraftforge/common/ForgeVersion.java')
version = '1.7.10-10.13.5.0-1.7.10'

/*jenkins {
    job = 'minecraftforge'
}*/

// crowdin stuff
/*if (project.hasProperty("crowdinKey"))
    tasks.getLocalizations.apiKey = project.crowdinKey*/


launch4j {
    jreMinVersion = '1.6.0'
}

/*dependencies {
    compile fileTree(dir: "libs", include: "*.jar")
}*/


/*uploadArchives {
    repositories {
        add getProject().repositories.mavenLocal()
    }
    repositories.mavenDeployer {
        configuration = configurations.deployJars

        if (project.hasProperty("filesmaven")) {
            logger.info('Publishing to files server')
            repository(url: project.filesmaven.url) {
                authentication(userName: project.filesmaven.username, privateKey: project.filesmaven.key)
            }
        } else {
            logger.info('Publishing to repo folder')
            repository(url: 'file://localhost/' + project.file('repo').getAbsolutePath())
        }

        pom {
            groupId = project.group
            version = project.version
            artifactId = project.archivesBaseName
        }
        pom.project {
            name project.archivesBaseName
            packaging 'jar'
            description 'Minecraft Forge API'
            url 'https://github.com/MinecraftForge/MinecraftForge'

            scm {
                url 'https://github.com/MinecraftForge/MinecraftForge'
                connection 'scm:git:git://github.com/MinecraftForge/MinecraftForge.git'
                developerConnection 'scm:git:git@github.com:MinecraftForge/MinecraftForge.git'
            }

            issueManagement {
                system 'github'
                url 'https://github.com/MinecraftForge/MinecraftForge/issues'
            }

            licenses {
                license {
                    name 'Forge Public License'
                    url 'https://raw.github.com/MinecraftForge/MinecraftForge/master/MinecraftForge-License.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'cpw'
                    name 'cpw'
                    roles { role 'developer' }
                }
                developer {
                    id 'LexManos'
                    name 'Lex Manos'
                    roles { role 'developer' }
                }
                developer {
                    id 'AbrarSyed'
                    name 'Abrar Syed'
                    roles { role 'contributor' }
                }
            }
        }
    }
}*/
